"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const zod_1 = require("zod");
const dynamoClient = new client_dynamodb_1.DynamoDBClient({});
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoClient);
const QueryParamsSchema = zod_1.z.object({
    queryType: zod_1.z.enum(['byPrincipal', 'byService', 'byRiskLevel', 'byTimeRange']),
    principalId: zod_1.z.string().optional(),
    serviceName: zod_1.z.string().optional(),
    eventType: zod_1.z.string().optional(),
    riskLevel: zod_1.z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']).optional(),
    startTime: zod_1.z.string().optional(),
    endTime: zod_1.z.string().optional(),
    limit: zod_1.z.string().optional(),
    nextToken: zod_1.z.string().optional()
});
const handler = async (event, _context) => {
    console.log('Processing audit query:', JSON.stringify(event.queryStringParameters, null, 2));
    try {
        // Parse and validate query parameters
        const queryParams = QueryParamsSchema.parse(event.queryStringParameters || {});
        const limit = queryParams.limit ? parseInt(queryParams.limit) : 50;
        let result;
        switch (queryParams.queryType) {
            case 'byPrincipal':
                result = await queryByPrincipal(queryParams.principalId, queryParams.startTime, queryParams.endTime, limit, queryParams.nextToken);
                break;
            case 'byService':
                result = await queryByService(queryParams.serviceName, queryParams.eventType, limit, queryParams.nextToken);
                break;
            case 'byRiskLevel':
                result = await queryByRiskLevel(queryParams.riskLevel, queryParams.startTime, queryParams.endTime, limit, queryParams.nextToken);
                break;
            case 'byTimeRange':
                result = await queryByTimeRange(queryParams.startTime, queryParams.endTime, limit, queryParams.nextToken);
                break;
            default:
                throw new Error('Invalid query type');
        }
        return {
            statusCode: 200,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization'
            },
            body: JSON.stringify(result)
        };
    }
    catch (error) {
        console.error('Query failed:', error);
        if (error instanceof zod_1.z.ZodError) {
            return {
                statusCode: 400,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    error: 'Invalid query parameters',
                    details: error.errors
                })
            };
        }
        return {
            statusCode: 500,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                error: 'Internal server error',
                message: error instanceof Error ? error.message : 'Unknown error'
            })
        };
    }
};
exports.handler = handler;
async function queryByPrincipal(principalId, startTime, endTime, limit = 50, nextToken) {
    const params = {
        TableName: process.env.AUDIT_TABLE_NAME,
        IndexName: 'PrincipalTimeIndex',
        KeyConditionExpression: 'principalId = :principalId',
        ExpressionAttributeValues: {
            ':principalId': principalId
        },
        Limit: limit,
        ScanIndexForward: false // Most recent first
    };
    // Add time range filter if provided
    if (startTime && endTime) {
        params.KeyConditionExpression += ' AND #timestamp BETWEEN :startTime AND :endTime';
        params.ExpressionAttributeNames = { '#timestamp': 'timestamp' };
        params.ExpressionAttributeValues[':startTime'] = startTime;
        params.ExpressionAttributeValues[':endTime'] = endTime;
    }
    if (nextToken) {
        params.ExclusiveStartKey = JSON.parse(Buffer.from(nextToken, 'base64').toString());
    }
    const command = new lib_dynamodb_1.QueryCommand(params);
    const response = await docClient.send(command);
    return {
        events: response.Items || [],
        nextToken: response.LastEvaluatedKey ?
            Buffer.from(JSON.stringify(response.LastEvaluatedKey)).toString('base64') :
            undefined
    };
}
async function queryByService(serviceName, eventType, limit = 50, nextToken) {
    const params = {
        TableName: process.env.AUDIT_TABLE_NAME,
        IndexName: 'ServiceEventTypeIndex',
        KeyConditionExpression: 'serviceName = :serviceName',
        ExpressionAttributeValues: {
            ':serviceName': serviceName
        },
        Limit: limit,
        ScanIndexForward: false
    };
    if (eventType) {
        params.KeyConditionExpression += ' AND eventType = :eventType';
        params.ExpressionAttributeValues[':eventType'] = eventType;
    }
    if (nextToken) {
        params.ExclusiveStartKey = JSON.parse(Buffer.from(nextToken, 'base64').toString());
    }
    const command = new lib_dynamodb_1.QueryCommand(params);
    const response = await docClient.send(command);
    return {
        events: response.Items || [],
        nextToken: response.LastEvaluatedKey ?
            Buffer.from(JSON.stringify(response.LastEvaluatedKey)).toString('base64') :
            undefined
    };
}
async function queryByRiskLevel(riskLevel, startTime, endTime, limit = 50, nextToken) {
    const params = {
        TableName: process.env.AUDIT_TABLE_NAME,
        IndexName: 'RiskLevelTimeIndex',
        KeyConditionExpression: 'riskLevel = :riskLevel',
        ExpressionAttributeValues: {
            ':riskLevel': riskLevel
        },
        Limit: limit,
        ScanIndexForward: false
    };
    if (startTime && endTime) {
        params.KeyConditionExpression += ' AND #timestamp BETWEEN :startTime AND :endTime';
        params.ExpressionAttributeNames = { '#timestamp': 'timestamp' };
        params.ExpressionAttributeValues[':startTime'] = startTime;
        params.ExpressionAttributeValues[':endTime'] = endTime;
    }
    if (nextToken) {
        params.ExclusiveStartKey = JSON.parse(Buffer.from(nextToken, 'base64').toString());
    }
    const command = new lib_dynamodb_1.QueryCommand(params);
    const response = await docClient.send(command);
    return {
        events: response.Items || [],
        nextToken: response.LastEvaluatedKey ?
            Buffer.from(JSON.stringify(response.LastEvaluatedKey)).toString('base64') :
            undefined
    };
}
async function queryByTimeRange(startTime, endTime, limit = 50, nextToken) {
    // This requires a scan operation since we don't have a GSI with just timestamp
    // In production, consider using DynamoDB Streams with time-series data patterns
    const params = {
        TableName: process.env.AUDIT_TABLE_NAME,
        FilterExpression: '#timestamp BETWEEN :startTime AND :endTime',
        ExpressionAttributeNames: {
            '#timestamp': 'timestamp'
        },
        ExpressionAttributeValues: {
            ':startTime': startTime,
            ':endTime': endTime
        },
        Limit: limit
    };
    if (nextToken) {
        params.ExclusiveStartKey = JSON.parse(Buffer.from(nextToken, 'base64').toString());
    }
    const command = new lib_dynamodb_1.ScanCommand(params);
    const response = await docClient.send(command);
    return {
        events: response.Items || [],
        nextToken: response.LastEvaluatedKey ?
            Buffer.from(JSON.stringify(response.LastEvaluatedKey)).toString('base64') :
            undefined
    };
}
//# sourceMappingURL=data:application/json;base64,