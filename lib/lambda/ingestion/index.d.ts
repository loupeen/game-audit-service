import { EventBridgeEvent, Handler } from 'aws-lambda';
import { z } from 'zod';
declare const AuditEventSchema: z.ZodObject<{
    eventType: z.ZodString;
    serviceName: z.ZodString;
    principalId: z.ZodOptional<z.ZodString>;
    principalType: z.ZodOptional<z.ZodEnum<["user", "service", "system"]>>;
    resourceType: z.ZodOptional<z.ZodString>;
    resourceId: z.ZodOptional<z.ZodString>;
    action: z.ZodString;
    outcome: z.ZodEnum<["SUCCESS", "FAILURE", "ERROR"]>;
    riskLevel: z.ZodEnum<["LOW", "MEDIUM", "HIGH", "CRITICAL"]>;
    details: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    sourceIp: z.ZodOptional<z.ZodString>;
    userAgent: z.ZodOptional<z.ZodString>;
    sessionId: z.ZodOptional<z.ZodString>;
    requestId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    serviceName: string;
    eventType: string;
    riskLevel: "CRITICAL" | "HIGH" | "LOW" | "MEDIUM";
    action: string;
    outcome: "FAILURE" | "SUCCESS" | "ERROR";
    principalId?: string | undefined;
    userAgent?: string | undefined;
    sourceIp?: string | undefined;
    principalType?: "user" | "service" | "system" | undefined;
    resourceType?: string | undefined;
    resourceId?: string | undefined;
    details?: Record<string, unknown> | undefined;
    sessionId?: string | undefined;
    requestId?: string | undefined;
}, {
    serviceName: string;
    eventType: string;
    riskLevel: "CRITICAL" | "HIGH" | "LOW" | "MEDIUM";
    action: string;
    outcome: "FAILURE" | "SUCCESS" | "ERROR";
    principalId?: string | undefined;
    userAgent?: string | undefined;
    sourceIp?: string | undefined;
    principalType?: "user" | "service" | "system" | undefined;
    resourceType?: string | undefined;
    resourceId?: string | undefined;
    details?: Record<string, unknown> | undefined;
    sessionId?: string | undefined;
    requestId?: string | undefined;
}>;
type AuditEvent = z.infer<typeof AuditEventSchema>;
export declare const handler: Handler<EventBridgeEvent<string, AuditEvent>, void>;
export {};
