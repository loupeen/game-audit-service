"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const zod_1 = require("zod");
const crypto_1 = __importDefault(require("crypto"));
const dynamoClient = new client_dynamodb_1.DynamoDBClient({});
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoClient);
const AuditEventSchema = zod_1.z.object({
    eventType: zod_1.z.string(),
    serviceName: zod_1.z.string(),
    principalId: zod_1.z.string().optional(),
    principalType: zod_1.z.enum(['user', 'service', 'system']).optional(),
    resourceType: zod_1.z.string().optional(),
    resourceId: zod_1.z.string().optional(),
    action: zod_1.z.string(),
    outcome: zod_1.z.enum(['SUCCESS', 'FAILURE', 'ERROR']),
    riskLevel: zod_1.z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']),
    details: zod_1.z.record(zod_1.z.unknown()).optional(),
    sourceIp: zod_1.z.string().optional(),
    userAgent: zod_1.z.string().optional(),
    sessionId: zod_1.z.string().optional(),
    requestId: zod_1.z.string().optional()
});
const handler = async (event, context) => {
    console.log('Processing audit event:', JSON.stringify(event, null, 2));
    try {
        // Validate the event detail
        const auditEvent = AuditEventSchema.parse(event.detail);
        // Generate unique event ID
        const eventId = crypto_1.default.randomUUID();
        const timestamp = new Date(event.time).toISOString();
        const ingestionTime = new Date().toISOString();
        // Calculate TTL (optional data retention)
        const environment = process.env.ENVIRONMENT || 'test';
        let ttl;
        // Set TTL based on environment and risk level
        if (environment !== 'production') {
            const retentionMonths = auditEvent.riskLevel === 'CRITICAL' ? 12 :
                auditEvent.riskLevel === 'HIGH' ? 6 : 3;
            const ttlDate = new Date();
            ttlDate.setMonth(ttlDate.getMonth() + retentionMonths);
            ttl = Math.floor(ttlDate.getTime() / 1000);
        }
        // Create audit record
        const auditRecord = {
            eventId,
            timestamp,
            eventType: auditEvent.eventType,
            serviceName: auditEvent.serviceName,
            principalId: auditEvent.principalId,
            principalType: auditEvent.principalType,
            resourceType: auditEvent.resourceType,
            resourceId: auditEvent.resourceId,
            action: auditEvent.action,
            outcome: auditEvent.outcome,
            riskLevel: auditEvent.riskLevel,
            details: auditEvent.details,
            sourceIp: auditEvent.sourceIp,
            userAgent: auditEvent.userAgent,
            sessionId: auditEvent.sessionId,
            requestId: auditEvent.requestId || context.awsRequestId,
            ingestionTime,
            ...(ttl && { ttl })
        };
        // Store in DynamoDB
        const command = new lib_dynamodb_1.PutCommand({
            TableName: process.env.AUDIT_TABLE_NAME,
            Item: auditRecord
        });
        await docClient.send(command);
        console.log(`Audit event stored successfully: ${eventId}`);
        // Log high-risk events for immediate attention
        if (auditEvent.riskLevel === 'CRITICAL' || auditEvent.riskLevel === 'HIGH') {
            console.warn(`HIGH-RISK AUDIT EVENT: ${auditEvent.eventType} - ${auditEvent.action}`, {
                eventId,
                principalId: auditEvent.principalId,
                riskLevel: auditEvent.riskLevel,
                outcome: auditEvent.outcome,
                details: auditEvent.details
            });
        }
    }
    catch (error) {
        console.error('Failed to process audit event:', error);
        console.error('Event details:', JSON.stringify(event, null, 2));
        // For critical errors, we might want to send to DLQ or SNS topic
        throw error; // This will trigger retry logic
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9sYW1iZGEvaW5nZXN0aW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhEQUEwRDtBQUMxRCx3REFBMkU7QUFFM0UsNkJBQXdCO0FBQ3hCLG9EQUE0QjtBQUU1QixNQUFNLFlBQVksR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDNUMsTUFBTSxTQUFTLEdBQUcscUNBQXNCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRTVELE1BQU0sZ0JBQWdCLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNoQyxTQUFTLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtJQUNyQixXQUFXLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtJQUN2QixXQUFXLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNsQyxhQUFhLEVBQUUsT0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDL0QsWUFBWSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDbkMsVUFBVSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDakMsTUFBTSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7SUFDbEIsT0FBTyxFQUFFLE9BQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELFNBQVMsRUFBRSxPQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDeEQsT0FBTyxFQUFFLE9BQUMsQ0FBQyxNQUFNLENBQUMsT0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQ3pDLFFBQVEsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQy9CLFNBQVMsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2hDLFNBQVMsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2hDLFNBQVMsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0NBQ2pDLENBQUMsQ0FBQztBQXlCSSxNQUFNLE9BQU8sR0FBd0QsS0FBSyxFQUMvRSxLQUEyQyxFQUMzQyxPQUFnQixFQUNELEVBQUU7SUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV2RSxJQUFJLENBQUM7UUFDSCw0QkFBNEI7UUFDNUIsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCwyQkFBMkI7UUFDM0IsTUFBTSxPQUFPLEdBQUcsZ0JBQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckQsTUFBTSxhQUFhLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUUvQywwQ0FBMEM7UUFDMUMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDO1FBQ3RELElBQUksR0FBdUIsQ0FBQztRQUU1Qiw4Q0FBOEM7UUFDOUMsSUFBSSxXQUFXLEtBQUssWUFBWSxFQUFFLENBQUM7WUFDakMsTUFBTSxlQUFlLEdBQUcsVUFBVSxDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUMxQyxVQUFVLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUMzQixPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQztZQUN2RCxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUVELHNCQUFzQjtRQUN0QixNQUFNLFdBQVcsR0FBcUI7WUFDcEMsT0FBTztZQUNQLFNBQVM7WUFDVCxTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7WUFDL0IsV0FBVyxFQUFFLFVBQVUsQ0FBQyxXQUFXO1lBQ25DLFdBQVcsRUFBRSxVQUFVLENBQUMsV0FBVztZQUNuQyxhQUFhLEVBQUUsVUFBVSxDQUFDLGFBQWE7WUFDdkMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxZQUFZO1lBQ3JDLFVBQVUsRUFBRSxVQUFVLENBQUMsVUFBVTtZQUNqQyxNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU07WUFDekIsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPO1lBQzNCLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUztZQUMvQixPQUFPLEVBQUUsVUFBVSxDQUFDLE9BQU87WUFDM0IsUUFBUSxFQUFFLFVBQVUsQ0FBQyxRQUFRO1lBQzdCLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUztZQUMvQixTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7WUFDL0IsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLFlBQVk7WUFDdkQsYUFBYTtZQUNiLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztTQUNwQixDQUFDO1FBRUYsb0JBQW9CO1FBQ3BCLE1BQU0sT0FBTyxHQUFHLElBQUkseUJBQVUsQ0FBQztZQUM3QixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBaUI7WUFDeEMsSUFBSSxFQUFFLFdBQVc7U0FDbEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFM0QsK0NBQStDO1FBQy9DLElBQUksVUFBVSxDQUFDLFNBQVMsS0FBSyxVQUFVLElBQUksVUFBVSxDQUFDLFNBQVMsS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUMzRSxPQUFPLENBQUMsSUFBSSxDQUFDLDBCQUEwQixVQUFVLENBQUMsU0FBUyxNQUFNLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDcEYsT0FBTztnQkFDUCxXQUFXLEVBQUUsVUFBVSxDQUFDLFdBQVc7Z0JBQ25DLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUztnQkFDL0IsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPO2dCQUMzQixPQUFPLEVBQUUsVUFBVSxDQUFDLE9BQU87YUFDNUIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUVILENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWhFLGlFQUFpRTtRQUNqRSxNQUFNLEtBQUssQ0FBQyxDQUFDLGdDQUFnQztJQUMvQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBOUVXLFFBQUEsT0FBTyxXQThFbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYic7XG5pbXBvcnQgeyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50LCBQdXRDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvbGliLWR5bmFtb2RiJztcbmltcG9ydCB7IEV2ZW50QnJpZGdlRXZlbnQsIENvbnRleHQsIEhhbmRsZXIgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5jb25zdCBkeW5hbW9DbGllbnQgPSBuZXcgRHluYW1vREJDbGllbnQoe30pO1xuY29uc3QgZG9jQ2xpZW50ID0gRHluYW1vREJEb2N1bWVudENsaWVudC5mcm9tKGR5bmFtb0NsaWVudCk7XG5cbmNvbnN0IEF1ZGl0RXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGV2ZW50VHlwZTogei5zdHJpbmcoKSxcbiAgc2VydmljZU5hbWU6IHouc3RyaW5nKCksXG4gIHByaW5jaXBhbElkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHByaW5jaXBhbFR5cGU6IHouZW51bShbJ3VzZXInLCAnc2VydmljZScsICdzeXN0ZW0nXSkub3B0aW9uYWwoKSxcbiAgcmVzb3VyY2VUeXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHJlc291cmNlSWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgYWN0aW9uOiB6LnN0cmluZygpLFxuICBvdXRjb21lOiB6LmVudW0oWydTVUNDRVNTJywgJ0ZBSUxVUkUnLCAnRVJST1InXSksXG4gIHJpc2tMZXZlbDogei5lbnVtKFsnTE9XJywgJ01FRElVTScsICdISUdIJywgJ0NSSVRJQ0FMJ10pLFxuICBkZXRhaWxzOiB6LnJlY29yZCh6LnVua25vd24oKSkub3B0aW9uYWwoKSxcbiAgc291cmNlSXA6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgdXNlckFnZW50OiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHNlc3Npb25JZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICByZXF1ZXN0SWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKVxufSk7XG5cbnR5cGUgQXVkaXRFdmVudCA9IHouaW5mZXI8dHlwZW9mIEF1ZGl0RXZlbnRTY2hlbWE+O1xuXG5pbnRlcmZhY2UgQXVkaXRFdmVudFJlY29yZCB7XG4gIGV2ZW50SWQ6IHN0cmluZztcbiAgdGltZXN0YW1wOiBzdHJpbmc7XG4gIGV2ZW50VHlwZTogc3RyaW5nO1xuICBzZXJ2aWNlTmFtZTogc3RyaW5nO1xuICBwcmluY2lwYWxJZD86IHN0cmluZztcbiAgcHJpbmNpcGFsVHlwZT86IHN0cmluZztcbiAgcmVzb3VyY2VUeXBlPzogc3RyaW5nO1xuICByZXNvdXJjZUlkPzogc3RyaW5nO1xuICBhY3Rpb246IHN0cmluZztcbiAgb3V0Y29tZTogc3RyaW5nO1xuICByaXNrTGV2ZWw6IHN0cmluZztcbiAgZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBzb3VyY2VJcD86IHN0cmluZztcbiAgdXNlckFnZW50Pzogc3RyaW5nO1xuICBzZXNzaW9uSWQ/OiBzdHJpbmc7XG4gIHJlcXVlc3RJZD86IHN0cmluZztcbiAgaW5nZXN0aW9uVGltZTogc3RyaW5nO1xuICB0dGw/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyOiBIYW5kbGVyPEV2ZW50QnJpZGdlRXZlbnQ8c3RyaW5nLCBBdWRpdEV2ZW50Piwgdm9pZD4gPSBhc3luYyAoXG4gIGV2ZW50OiBFdmVudEJyaWRnZUV2ZW50PHN0cmluZywgQXVkaXRFdmVudD4sXG4gIGNvbnRleHQ6IENvbnRleHRcbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zb2xlLmxvZygnUHJvY2Vzc2luZyBhdWRpdCBldmVudDonLCBKU09OLnN0cmluZ2lmeShldmVudCwgbnVsbCwgMikpO1xuICBcbiAgdHJ5IHtcbiAgICAvLyBWYWxpZGF0ZSB0aGUgZXZlbnQgZGV0YWlsXG4gICAgY29uc3QgYXVkaXRFdmVudCA9IEF1ZGl0RXZlbnRTY2hlbWEucGFyc2UoZXZlbnQuZGV0YWlsKTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSB1bmlxdWUgZXZlbnQgSURcbiAgICBjb25zdCBldmVudElkID0gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZShldmVudC50aW1lKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnN0IGluZ2VzdGlvblRpbWUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIFRUTCAob3B0aW9uYWwgZGF0YSByZXRlbnRpb24pXG4gICAgY29uc3QgZW52aXJvbm1lbnQgPSBwcm9jZXNzLmVudi5FTlZJUk9OTUVOVCB8fCAndGVzdCc7XG4gICAgbGV0IHR0bDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIFxuICAgIC8vIFNldCBUVEwgYmFzZWQgb24gZW52aXJvbm1lbnQgYW5kIHJpc2sgbGV2ZWxcbiAgICBpZiAoZW52aXJvbm1lbnQgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgcmV0ZW50aW9uTW9udGhzID0gYXVkaXRFdmVudC5yaXNrTGV2ZWwgPT09ICdDUklUSUNBTCcgPyAxMiA6IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXVkaXRFdmVudC5yaXNrTGV2ZWwgPT09ICdISUdIJyA/IDYgOiAzO1xuICAgICAgY29uc3QgdHRsRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICB0dGxEYXRlLnNldE1vbnRoKHR0bERhdGUuZ2V0TW9udGgoKSArIHJldGVudGlvbk1vbnRocyk7XG4gICAgICB0dGwgPSBNYXRoLmZsb29yKHR0bERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgfVxuICAgIFxuICAgIC8vIENyZWF0ZSBhdWRpdCByZWNvcmRcbiAgICBjb25zdCBhdWRpdFJlY29yZDogQXVkaXRFdmVudFJlY29yZCA9IHtcbiAgICAgIGV2ZW50SWQsXG4gICAgICB0aW1lc3RhbXAsXG4gICAgICBldmVudFR5cGU6IGF1ZGl0RXZlbnQuZXZlbnRUeXBlLFxuICAgICAgc2VydmljZU5hbWU6IGF1ZGl0RXZlbnQuc2VydmljZU5hbWUsXG4gICAgICBwcmluY2lwYWxJZDogYXVkaXRFdmVudC5wcmluY2lwYWxJZCxcbiAgICAgIHByaW5jaXBhbFR5cGU6IGF1ZGl0RXZlbnQucHJpbmNpcGFsVHlwZSxcbiAgICAgIHJlc291cmNlVHlwZTogYXVkaXRFdmVudC5yZXNvdXJjZVR5cGUsXG4gICAgICByZXNvdXJjZUlkOiBhdWRpdEV2ZW50LnJlc291cmNlSWQsXG4gICAgICBhY3Rpb246IGF1ZGl0RXZlbnQuYWN0aW9uLFxuICAgICAgb3V0Y29tZTogYXVkaXRFdmVudC5vdXRjb21lLFxuICAgICAgcmlza0xldmVsOiBhdWRpdEV2ZW50LnJpc2tMZXZlbCxcbiAgICAgIGRldGFpbHM6IGF1ZGl0RXZlbnQuZGV0YWlscyxcbiAgICAgIHNvdXJjZUlwOiBhdWRpdEV2ZW50LnNvdXJjZUlwLFxuICAgICAgdXNlckFnZW50OiBhdWRpdEV2ZW50LnVzZXJBZ2VudCxcbiAgICAgIHNlc3Npb25JZDogYXVkaXRFdmVudC5zZXNzaW9uSWQsXG4gICAgICByZXF1ZXN0SWQ6IGF1ZGl0RXZlbnQucmVxdWVzdElkIHx8IGNvbnRleHQuYXdzUmVxdWVzdElkLFxuICAgICAgaW5nZXN0aW9uVGltZSxcbiAgICAgIC4uLih0dGwgJiYgeyB0dGwgfSlcbiAgICB9O1xuICAgIFxuICAgIC8vIFN0b3JlIGluIER5bmFtb0RCXG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBQdXRDb21tYW5kKHtcbiAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuQVVESVRfVEFCTEVfTkFNRSEsXG4gICAgICBJdGVtOiBhdWRpdFJlY29yZFxuICAgIH0pO1xuICAgIFxuICAgIGF3YWl0IGRvY0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBBdWRpdCBldmVudCBzdG9yZWQgc3VjY2Vzc2Z1bGx5OiAke2V2ZW50SWR9YCk7XG4gICAgXG4gICAgLy8gTG9nIGhpZ2gtcmlzayBldmVudHMgZm9yIGltbWVkaWF0ZSBhdHRlbnRpb25cbiAgICBpZiAoYXVkaXRFdmVudC5yaXNrTGV2ZWwgPT09ICdDUklUSUNBTCcgfHwgYXVkaXRFdmVudC5yaXNrTGV2ZWwgPT09ICdISUdIJykge1xuICAgICAgY29uc29sZS53YXJuKGBISUdILVJJU0sgQVVESVQgRVZFTlQ6ICR7YXVkaXRFdmVudC5ldmVudFR5cGV9IC0gJHthdWRpdEV2ZW50LmFjdGlvbn1gLCB7XG4gICAgICAgIGV2ZW50SWQsXG4gICAgICAgIHByaW5jaXBhbElkOiBhdWRpdEV2ZW50LnByaW5jaXBhbElkLFxuICAgICAgICByaXNrTGV2ZWw6IGF1ZGl0RXZlbnQucmlza0xldmVsLFxuICAgICAgICBvdXRjb21lOiBhdWRpdEV2ZW50Lm91dGNvbWUsXG4gICAgICAgIGRldGFpbHM6IGF1ZGl0RXZlbnQuZGV0YWlsc1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwcm9jZXNzIGF1ZGl0IGV2ZW50OicsIGVycm9yKTtcbiAgICBjb25zb2xlLmVycm9yKCdFdmVudCBkZXRhaWxzOicsIEpTT04uc3RyaW5naWZ5KGV2ZW50LCBudWxsLCAyKSk7XG4gICAgXG4gICAgLy8gRm9yIGNyaXRpY2FsIGVycm9ycywgd2UgbWlnaHQgd2FudCB0byBzZW5kIHRvIERMUSBvciBTTlMgdG9waWNcbiAgICB0aHJvdyBlcnJvcjsgLy8gVGhpcyB3aWxsIHRyaWdnZXIgcmV0cnkgbG9naWNcbiAgfVxufTsiXX0=