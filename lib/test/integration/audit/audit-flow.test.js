"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_eventbridge_1 = require("@aws-sdk/client-eventbridge");
describe('Audit Service Integration Tests', () => {
    let dynamoClient;
    let docClient;
    let eventBridgeClient;
    beforeAll(() => {
        dynamoClient = new client_dynamodb_1.DynamoDBClient({
            region: process.env.AWS_REGION || 'eu-north-1'
        });
        docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoClient);
        eventBridgeClient = new client_eventbridge_1.EventBridgeClient({
            region: process.env.AWS_REGION || 'eu-north-1'
        });
    });
    describe('Event Ingestion', () => {
        test('should accept valid audit events', async () => {
            const testEvent = {
                eventId: `test-${Date.now()}`,
                timestamp: new Date().toISOString(),
                serviceName: 'loupeen.auth',
                eventType: 'Authentication Event',
                principalId: 'test-user-123',
                sourceIp: '192.168.1.100',
                userAgent: 'Mozilla/5.0 (Test Browser)',
                action: 'login',
                outcome: 'SUCCESS',
                riskLevel: 'LOW',
                details: {
                    method: 'password',
                    sessionId: 'test-session-123'
                }
            };
            // This test would normally interact with the deployed infrastructure
            // For now, we'll just validate the event structure
            expect(testEvent.eventId).toBeDefined();
            expect(testEvent.timestamp).toBeDefined();
            expect(testEvent.serviceName).toBe('loupeen.auth');
            expect(testEvent.eventType).toBe('Authentication Event');
            expect(testEvent.outcome).toBe('SUCCESS');
        });
        test('should reject invalid audit events', async () => {
            const invalidEvent = {
                // Missing required fields
                eventId: `invalid-test-${Date.now()}`,
                serviceName: 'loupeen.auth'
                // Missing timestamp, eventType, etc.
            };
            // Validate that required fields are missing
            expect(invalidEvent.timestamp).toBeUndefined();
            expect(invalidEvent.eventType).toBeUndefined();
            expect(invalidEvent.principalId).toBeUndefined();
        });
    });
    describe('Query Operations', () => {
        test('should support querying by principal', async () => {
            const principalId = 'test-user-123';
            const queryParams = {
                queryType: 'byPrincipal',
                principalId: principalId,
                startTime: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 24 hours ago
                endTime: new Date().toISOString(),
                limit: '50'
            };
            expect(queryParams.queryType).toBe('byPrincipal');
            expect(queryParams.principalId).toBe(principalId);
            expect(queryParams.limit).toBe('50');
        });
        test('should support querying by service', async () => {
            const queryParams = {
                queryType: 'byService',
                serviceName: 'loupeen.auth',
                eventType: 'Authentication Event',
                limit: '100'
            };
            expect(queryParams.queryType).toBe('byService');
            expect(queryParams.serviceName).toBe('loupeen.auth');
            expect(queryParams.eventType).toBe('Authentication Event');
        });
        test('should support querying by risk level', async () => {
            const queryParams = {
                queryType: 'byRiskLevel',
                riskLevel: 'HIGH',
                startTime: new Date(Date.now() - 60 * 60 * 1000).toISOString(), // 1 hour ago
                endTime: new Date().toISOString(),
                limit: '25'
            };
            expect(queryParams.queryType).toBe('byRiskLevel');
            expect(queryParams.riskLevel).toBe('HIGH');
            expect(queryParams.limit).toBe('25');
        });
    });
    describe('Anomaly Detection', () => {
        test('should detect multiple failed login attempts', async () => {
            // Simulate multiple failed login events for same user
            const failedEvents = Array.from({ length: 6 }, (_, i) => ({
                eventId: `failed-login-${Date.now()}-${i}`,
                timestamp: new Date(Date.now() - (i * 60000)).toISOString(), // Spread over time
                serviceName: 'loupeen.auth',
                eventType: 'Authentication Event',
                principalId: 'suspicious-user-123',
                sourceIp: '192.168.1.200',
                action: 'login',
                outcome: 'FAILURE',
                riskLevel: 'MEDIUM',
                details: {
                    reason: 'invalid_password',
                    attemptNumber: i + 1
                }
            }));
            // Validate that we have enough failed attempts to trigger detection
            const failedAttempts = failedEvents.filter(e => e.outcome === 'FAILURE');
            expect(failedAttempts.length).toBeGreaterThanOrEqual(5);
            expect(failedAttempts.every(e => e.principalId === 'suspicious-user-123')).toBe(true);
        });
        test('should detect unusual IP activity', async () => {
            // Simulate multiple users from same IP
            const sharedIpEvents = ['user1', 'user2', 'user3', 'user4'].map((userId, i) => ({
                eventId: `shared-ip-${Date.now()}-${i}`,
                timestamp: new Date().toISOString(),
                serviceName: 'loupeen.auth',
                eventType: 'Authentication Event',
                principalId: userId,
                sourceIp: '192.168.1.300', // Same IP for all users
                action: 'login',
                outcome: 'SUCCESS',
                riskLevel: 'LOW'
            }));
            // Validate unusual IP pattern
            const uniqueIps = new Set(sharedIpEvents.map(e => e.sourceIp));
            const uniqueUsers = new Set(sharedIpEvents.map(e => e.principalId));
            expect(uniqueIps.size).toBe(1); // Only one IP
            expect(uniqueUsers.size).toBe(4); // But multiple users
        });
    });
    describe('Dashboard Metrics', () => {
        test('should support metrics aggregation', async () => {
            const metrics = {
                totalEvents: 1000,
                authenticationEvents: 800,
                authorizationEvents: 150,
                highRiskEvents: 50,
                failedAttempts: 25,
                anomaliesDetected: 3
            };
            expect(metrics.totalEvents).toBeGreaterThan(0);
            expect(metrics.authenticationEvents + metrics.authorizationEvents).toBeLessThanOrEqual(metrics.totalEvents);
            expect(metrics.highRiskEvents).toBeLessThan(metrics.totalEvents);
            expect(metrics.anomaliesDetected).toBeGreaterThanOrEqual(0);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,